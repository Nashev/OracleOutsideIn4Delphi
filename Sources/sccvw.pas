unit sccvw;
interface
uses
  SysUtils, Windows, Messages, baseio, scctype, sccop, sccanno, sccvw_w, sccerrUnit, sccid, sccopval;
{
  Automatically converted by H2Pas 1.0.0 from D:\work\FPC\ooi\sccvw.tmp.h
  The following command line parameters were used:
    -e
    -p
    -D
    -v
    -w
    -o
  And handmade update after it.
}

  const
    External_library='sccvw'; {Setup as you need}

//  { Pointers to basic pascal types, inserted by h2pas conversion program.}
//  Type
//    PLongint  = ^Longint;
//    PSmallInt = ^SmallInt;
//    PByte     = ^Byte;
//    PWord     = ^Word;
//    PDWord    = ^DWord;
//    PDouble   = ^Double;
//
//Type
//  PLPSCCVWFONTSPEC  = ^LPSCCVWFONTSPEC;
//  PPSCCVWANNOGEN  = ^PSCCVWANNOGEN;
//  PPSCCVWANNOTATIONEVENT40  = ^PSCCVWANNOTATIONEVENT40;
//  PPSCCVWANNOTATIONEVENT41  = ^PSCCVWANNOTATIONEVENT41;
//  PPSCCVWCOMPPOSITIONS41  = ^PSCCVWCOMPPOSITIONS41;
//  PPSCCVWCOPY41  = ^PSCCVWCOPY41;
//  PPSCCVWDAYNAMES  = ^PSCCVWDAYNAMES;
//  PPSCCVWDISPLAYINFO40  = ^PSCCVWDISPLAYINFO40;
//  PPSCCVWDISPLAYINFO80  = ^PSCCVWDISPLAYINFO80;
//  PPSCCVWDISPLAYPOSITION41  = ^PSCCVWDISPLAYPOSITION41;
//  PPSCCVWDRAMAMINE1  = ^PSCCVWDRAMAMINE1;
//  PPSCCVWFILEACCESSDATA  = ^PSCCVWFILEACCESSDATA;
//  PPSCCVWFILEINFO40  = ^PSCCVWFILEINFO40;
//  PPSCCVWFILEINFO80  = ^PSCCVWFILEINFO80;
//  PPSCCVWFINDANNOTATION41  = ^PSCCVWFINDANNOTATION41;
//  PPSCCVWFINDPOSITION41  = ^PSCCVWFINDPOSITION41;
//  PPSCCVWFONTALIAS  = ^PSCCVWFONTALIAS;
//  PPSCCVWFONTALIAS832  = ^PSCCVWFONTALIAS832;
//  PPSCCVWFONTALIASMAP  = ^PSCCVWFONTALIASMAP;
//  PPSCCVWFTDFOBJECTTAGDATA  = ^PSCCVWFTDFOBJECTTAGDATA;
//  PPSCCVWGETANNOTATIONDATA  = ^PSCCVWGETANNOTATIONDATA;
//  PPSCCVWGETPROP  = ^PSCCVWGETPROP;
//  PPSCCVWGETRAWTEXT50  = ^PSCCVWGETRAWTEXT50;
//  PPSCCVWHIDEPARABREAK80  = ^PSCCVWHIDEPARABREAK80;
//  PPSCCVWHIDEPARABREAK81  = ^PSCCVWHIDEPARABREAK81;
//  PPSCCVWHIDETEXT40  = ^PSCCVWHIDETEXT40;
//  PPSCCVWHIDETEXT41  = ^PSCCVWHIDETEXT41;
//  PPSCCVWHIDETEXT80  = ^PSCCVWHIDETEXT80;
//  PPSCCVWHIDETEXT81  = ^PSCCVWHIDETEXT81;
//  PPSCCVWHILITESTYLE41  = ^PSCCVWHILITESTYLE41;
//  PPSCCVWHILITESTYLE81  = ^PSCCVWHILITESTYLE81;
//  PPSCCVWHILITETEXT40  = ^PSCCVWHILITETEXT40;
//  PPSCCVWHILITETEXT41  = ^PSCCVWHILITETEXT41;
//  PPSCCVWHILITETEXT81  = ^PSCCVWHILITETEXT81;
//  PPSCCVWIDEALSIZE50  = ^PSCCVWIDEALSIZE50;
//  PPSCCVWIMAGEZOOM  = ^PSCCVWIMAGEZOOM;
//  PPSCCVWINSERTBITMAP42  = ^PSCCVWINSERTBITMAP42;
//  PPSCCVWINSERTBITMAP81  = ^PSCCVWINSERTBITMAP81;
//  PPSCCVWINSERTICON40  = ^PSCCVWINSERTICON40;
//  PPSCCVWINSERTICON41  = ^PSCCVWINSERTICON41;
//  PPSCCVWINSERTICON81  = ^PSCCVWINSERTICON81;
//  PPSCCVWINSERTPARABREAK80  = ^PSCCVWINSERTPARABREAK80;
//  PPSCCVWINSERTPARABREAK81  = ^PSCCVWINSERTPARABREAK81;
//  PPSCCVWINSERTTEXT80  = ^PSCCVWINSERTTEXT80;
//  PPSCCVWINSERTTEXT81  = ^PSCCVWINSERTTEXT81;
//  PPSCCVWMAPPOSITION41  = ^PSCCVWMAPPOSITION41;
//  PPSCCVWMAPTREEPOSITION60  = ^PSCCVWMAPTREEPOSITION60;
//  PPSCCVWMAPTREEPOSITION82  = ^PSCCVWMAPTREEPOSITION82;
//  PPSCCVWMONTHNAMES  = ^PSCCVWMONTHNAMES;
//  PPSCCVWNUMBERFORMAT  = ^PSCCVWNUMBERFORMAT;
//  PPSCCVWNUMBERFORMAT775  = ^PSCCVWNUMBERFORMAT775;
//  PPSCCVWOPTIONSPEC40  = ^PSCCVWOPTIONSPEC40;
//  PPSCCVWPOS  = ^PSCCVWPOS;
//  PPSCCVWPRINTMARGINS  = ^PSCCVWPRINTMARGINS;
//  PPSCCVWRESOURCEID  = ^PSCCVWRESOURCEID;
//  PPSCCVWSEARCHINFO40  = ^PSCCVWSEARCHINFO40;
//  PPSCCVWSEARCHINFO80  = ^PSCCVWSEARCHINFO80;
//  PPSCCVWSECTIONCOUNTINFO51  = ^PSCCVWSECTIONCOUNTINFO51;
//  PPSCCVWSECTIONNAME  = ^PSCCVWSECTIONNAME;
//  PPSCCVWSETSELECTION41  = ^PSCCVWSETSELECTION41;
//  PPSCCVWSTATUSINFO50  = ^PSCCVWSTATUSINFO50;
//  PPSCCVWVIEWFILE40  = ^PSCCVWVIEWFILE40;
//  PPSCCVWVIEWFILE80  = ^PSCCVWVIEWFILE80;
//  PPSCCVWVIEWTHISFILE40  = ^PSCCVWVIEWTHISFILE40;
//  PPSCCVWVIEWTHISFILE80  = ^PSCCVWVIEWTHISFILE80;
//  PSCCVWANNOGEN  = ^SCCVWANNOGEN;
//  PSCCVWANNOTATIONEVENT40  = ^SCCVWANNOTATIONEVENT40;
//  PSCCVWANNOTATIONEVENT41  = ^SCCVWANNOTATIONEVENT41;
//  PSCCVWCOLORREF  = ^SCCVWCOLORREF;
//  PSCCVWCOMPPOSITIONS41  = ^SCCVWCOMPPOSITIONS41;
//  PSCCVWCOMPPOSITIONS41  = ^SCCVWCOMPPOSITIONS41;
//  PSCCVWCOPY41  = ^SCCVWCOPY41;
//  PSCCVWCOPY41  = ^SCCVWCOPY41;
//  PSCCVWDAYNAMES  = ^SCCVWDAYNAMES;
//  PSCCVWDAYNAMES  = ^SCCVWDAYNAMES;
//  PSCCVWDISPLAYINFO40  = ^SCCVWDISPLAYINFO40;
//  PSCCVWDISPLAYINFO40  = ^SCCVWDISPLAYINFO40;
//  PSCCVWDISPLAYINFO80  = ^SCCVWDISPLAYINFO80;
//  PSCCVWDISPLAYINFO80  = ^SCCVWDISPLAYINFO80;
//  PSCCVWDISPLAYPOSITION41  = ^SCCVWDISPLAYPOSITION41;
//  PSCCVWDISPLAYPOSITION41  = ^SCCVWDISPLAYPOSITION41;
//  PSCCVWDRAMAMINE1  = ^SCCVWDRAMAMINE1;
//  PSCCVWDRAMAMINE1  = ^SCCVWDRAMAMINE1;
//  PSCCVWFILEACCESSDATA  = ^SCCVWFILEACCESSDATA;
//  PSCCVWFILEACCESSDATA  = ^SCCVWFILEACCESSDATA;
//  PSCCVWFILEINFO40  = ^SCCVWFILEINFO40;
//  PSCCVWFILEINFO40  = ^SCCVWFILEINFO40;
//  PSCCVWFILEINFO80  = ^SCCVWFILEINFO80;
//  PSCCVWFILEINFO80  = ^SCCVWFILEINFO80;
//  PSCCVWFINDANNOTATION41  = ^SCCVWFINDANNOTATION41;
//  PSCCVWFINDPOSITION41  = ^SCCVWFINDPOSITION41;
//  PSCCVWFINDPOSITION41  = ^SCCVWFINDPOSITION41;
//  PSCCVWFONTALIAS  = ^SCCVWFONTALIAS;
//  PSCCVWFONTALIAS832  = ^SCCVWFONTALIAS832;
//  PSCCVWFONTALIAS832  = ^SCCVWFONTALIAS832;
//  PSCCVWFONTALIASMAP  = ^SCCVWFONTALIASMAP;
//  PSCCVWFONTALIASMAP  = ^SCCVWFONTALIASMAP;
//  PSCCVWFONTALIAS  = ^SCCVWFONTALIAS;
//  PSCCVWFONTSPEC  = ^SCCVWFONTSPEC;
//  PSCCVWFONTSPEC  = ^SCCVWFONTSPEC;
//  PSCCVWFTDFOBJECTTAGDATA  = ^SCCVWFTDFOBJECTTAGDATA;
//  PSCCVWFTDFOBJECTTAGDATA  = ^SCCVWFTDFOBJECTTAGDATA;
//  PSCCVWGETANNOTATIONDATA  = ^SCCVWGETANNOTATIONDATA;
//  PSCCVWGETANNOTATIONDATA  = ^SCCVWGETANNOTATIONDATA;
//  PSCCVWGETPROP  = ^SCCVWGETPROP;
//  PSCCVWGETPROP  = ^SCCVWGETPROP;
//  PSCCVWGETRAWTEXT50  = ^SCCVWGETRAWTEXT50;
//  PSCCVWGETRAWTEXT50  = ^SCCVWGETRAWTEXT50;
//  PSCCVWHIDEPARABREAK80  = ^SCCVWHIDEPARABREAK80;
//  PSCCVWHIDEPARABREAK81  = ^SCCVWHIDEPARABREAK81;
//  PSCCVWHIDETEXT40  = ^SCCVWHIDETEXT40;
//  PSCCVWHIDETEXT41  = ^SCCVWHIDETEXT41;
//  PSCCVWHIDETEXT80  = ^SCCVWHIDETEXT80;
//  PSCCVWHIDETEXT81  = ^SCCVWHIDETEXT81;
//  PSCCVWHILITESTYLE41  = ^SCCVWHILITESTYLE41;
//  PSCCVWHILITESTYLE81  = ^SCCVWHILITESTYLE81;
//  PSCCVWHILITETEXT40  = ^SCCVWHILITETEXT40;
//  PSCCVWHILITETEXT41  = ^SCCVWHILITETEXT41;
//  PSCCVWHILITETEXT81  = ^SCCVWHILITETEXT81;
//  PSCCVWIDEALSIZE50  = ^SCCVWIDEALSIZE50;
//  PSCCVWIDEALSIZE50  = ^SCCVWIDEALSIZE50;
//  PSCCVWIMAGEZOOM  = ^SCCVWIMAGEZOOM;
//  PSCCVWIMAGEZOOM  = ^SCCVWIMAGEZOOM;
//  PSCCVWINSERTBITMAP42  = ^SCCVWINSERTBITMAP42;
//  PSCCVWINSERTBITMAP81  = ^SCCVWINSERTBITMAP81;
//  PSCCVWINSERTICON40  = ^SCCVWINSERTICON40;
//  PSCCVWINSERTICON41  = ^SCCVWINSERTICON41;
//  PSCCVWINSERTICON81  = ^SCCVWINSERTICON81;
//  PSCCVWINSERTPARABREAK80  = ^SCCVWINSERTPARABREAK80;
//  PSCCVWINSERTPARABREAK81  = ^SCCVWINSERTPARABREAK81;
//  PSCCVWINSERTTEXT80  = ^SCCVWINSERTTEXT80;
//  PSCCVWINSERTTEXT81  = ^SCCVWINSERTTEXT81;
//  PSCCVWMAPPOSITION41  = ^SCCVWMAPPOSITION41;
//  PSCCVWMAPPOSITION41  = ^SCCVWMAPPOSITION41;
//  PSCCVWMAPTREEPOSITION60  = ^SCCVWMAPTREEPOSITION60;
//  PSCCVWMAPTREEPOSITION60  = ^SCCVWMAPTREEPOSITION60;
//  PSCCVWMAPTREEPOSITION82  = ^SCCVWMAPTREEPOSITION82;
//  PSCCVWMAPTREEPOSITION82  = ^SCCVWMAPTREEPOSITION82;
//  PSCCVWMONTHNAMES  = ^SCCVWMONTHNAMES;
//  PSCCVWMONTHNAMES  = ^SCCVWMONTHNAMES;
//  PSCCVWNUMBERFORMAT  = ^SCCVWNUMBERFORMAT;
//  PSCCVWNUMBERFORMAT775  = ^SCCVWNUMBERFORMAT775;
//  PSCCVWNUMBERFORMAT775  = ^SCCVWNUMBERFORMAT775;
//  PSCCVWNUMBERFORMAT  = ^SCCVWNUMBERFORMAT;
//  PSCCVWOPTIONSPEC40  = ^SCCVWOPTIONSPEC40;
//  PSCCVWOPTIONSPEC40  = ^SCCVWOPTIONSPEC40;
//  PSCCVWPOS  = ^SCCVWPOS;
//  PSCCVWPRINTMARGINS  = ^SCCVWPRINTMARGINS;
//  PSCCVWPRINTMARGINS  = ^SCCVWPRINTMARGINS;
//  PSCCVWRESOURCEID  = ^SCCVWRESOURCEID;
//  PSCCVWRESOURCEID  = ^SCCVWRESOURCEID;
//  PSCCVWSAVENODE  = ^SCCVWSAVENODE;
//  PSCCVWSAVENODE  = ^SCCVWSAVENODE;
//  PSCCVWSEARCHINFO40  = ^SCCVWSEARCHINFO40;
//  PSCCVWSEARCHINFO40  = ^SCCVWSEARCHINFO40;
//  PSCCVWSEARCHINFO80  = ^SCCVWSEARCHINFO80;
//  PSCCVWSEARCHINFO80  = ^SCCVWSEARCHINFO80;
//  PSCCVWSECTIONCOUNTINFO51  = ^SCCVWSECTIONCOUNTINFO51;
//  PSCCVWSECTIONCOUNTINFO51  = ^SCCVWSECTIONCOUNTINFO51;
//  PSCCVWSECTIONNAME  = ^SCCVWSECTIONNAME;
//  PSCCVWSECTIONNAME  = ^SCCVWSECTIONNAME;
//  PSCCVWSETSELECTION41  = ^SCCVWSETSELECTION41;
//  PSCCVWSETSELECTION41  = ^SCCVWSETSELECTION41;
//  PSCCVWSTATUSINFO50  = ^SCCVWSTATUSINFO50;
//  PSCCVWSTATUSINFO50  = ^SCCVWSTATUSINFO50;
//  PSCCVWUNIXOPTIONSFILEINFO  = ^SCCVWUNIXOPTIONSFILEINFO;
//  PSCCVWUNIXOPTIONSFILEINFO  = ^SCCVWUNIXOPTIONSFILEINFO;
//  PSCCVWVIEWFILE40  = ^SCCVWVIEWFILE40;
//  PSCCVWVIEWFILE40  = ^SCCVWVIEWFILE40;
//  PSCCVWVIEWFILE80  = ^SCCVWVIEWFILE80;
//  PSCCVWVIEWFILE80  = ^SCCVWVIEWFILE80;
//  PSCCVWVIEWTHISFILE40  = ^SCCVWVIEWTHISFILE40;
//  PSCCVWVIEWTHISFILE40  = ^SCCVWVIEWTHISFILE40;
//  PSCCVWVIEWTHISFILE80  = ^SCCVWVIEWTHISFILE80;
//  PSCCVWVIEWTHISFILE80  = ^SCCVWVIEWTHISFILE80;
//  PVTVOID  = ^VTVOID;
//{$IFDEF FPC}
//{$PACKRECORDS C}
//{$ENDIF}


  { Copyright (c) 2001, 2010, Oracle and/or its affiliates. All rights reserved.  }
  {
    |  Outside In Viewer Technology - Include
    |
    |  Include:      SCCVW.H
    |  Environment:  Portable
    |  Function:     Primary definitions for
    |                Outside In Viewer Technology Specification 4.0
    |
     }

const
   SCC_PACK_SET = 1;
   SCC_PACKED_BY_SCCVW_H = 1;

//{$if defined(_DARWIN_SOURCE)}
//
//  const
//     MAX_PATH = 256;
//     SCCVW_DISPLAYNAMEMAX = MAX_PATH;
//     SCCVW_FILENAMEMAX = MAX_PATH;
//     SCCVW_FILEIDNAMEMAX = 80;
//     SCCVW_DEFAULTMENUMAX = 5000;
//{$include "sccvw_osx.h"}
//{$endif}
//  { _DARWIN_SOURCE  }
//{$ifdef WINDOWS}
//{$include "sccvw_w.h"}
//{$endif}
//  { WINDOWS  }
//{$if defined(UNIX) && !defined(_DARWIN_SOURCE)}
//
//  const
//     MAX_PATH = 256;
//     SCCVW_DISPLAYNAMEMAX = MAX_PATH;
//     SCCVW_FILENAMEMAX = MAX_PATH;
//     SCCVW_FILEIDNAMEMAX = 80;
//     SCCVW_DEFAULTMENUMAX = 5000;
//{$include "sccvw_u.h"}
//{$endif}
//  { UNIX  }
//{$ifdef NLM}
//{$include "sccvw_l.h"}
//{$endif}
//  { NLM  }
//{$include "sccid.h"}
//{$include "sccio.h"}
//{$include "sccfi.h"}
//{$include "sccerr.h"}
  {
    |  Messages TO SCCVIEWER window
     }

  const
     SCCVW_FIRSTTOMESSAGE = SCCVW_START+1000;
     SCCVW_CLOSEFILE = SCCVW_START+1001;
     SCCVW_COPYTOCLIP = SCCVW_START+1004;
     SCCVW_SETIDLEBITMAP = SCCVW_START+1005;
     SCCVW_UNDO = SCCVW_START+1006;     
     SCCVW_REDO = SCCVW_START+1007;     
     SCCVW_GETFILEINFO = SCCVW_START+1010;     
     SCCVW_GETPROPERTY = SCCVW_START+1011;     
     SCCVW_GETCLIPINFO = SCCVW_START+1013;     
     SCCVW_SEARCH = SCCVW_START+1017;     
     SCCVW_SEARCHNEXT = SCCVW_START+1018;     
     SCCVW_GETDISPLAYINFO = SCCVW_START+1019;     
     SCCVW_DOMENUITEM = SCCVW_START+1022;     
     SCCVW_PRINT = SCCVW_START+1025;     
     SCCVW_PRINTSETUP = SCCVW_START+1026;     
     SCCVW_SELECTALL = SCCVW_START+1028;     
  {  Vendor Specific  }
     SCCVW_RENDERRTFTOFILE = SCCVW_START+1030;     
     SCCVW_SEARCHDIALOG = SCCVW_START+1031;     
     SCCVW_SETMENUMAX = SCCVW_START+1032;     
     SCCVW_PRINTEX = SCCVW_START+1040;     
     SCCVW_SETDISPLAYNAME = SCCVW_START+1041;     
     SCCVW_ADDANNOTATION = SCCVW_START+1042;     
     SCCVW_CLEARANNOTATIONS = SCCVW_START+1043;     
     SCCVW_GOTOANNOTATION = SCCVW_START+1044;     
     SCCVW_GETEDITANNOTATIONS = SCCVW_START+1045;     
     SCCVW_SETOPTION = SCCVW_START+1050;     
     SCCVW_GETOPTION = SCCVW_START+1051;     
     SCCVW_VIEWFILE = SCCVW_START+1052;     
     SCCVW_DRAWPAGE = SCCVW_START+1053;     
     SCCVW_INITDRAWPAGE = SCCVW_START+1054;     
     SCCVW_DEINITDRAWPAGE = SCCVW_START+1057;     
     SCCVW_DODIALOG = SCCVW_START+1058;     
     SCCVW_IDLE = SCCVW_START+1059;     
     SCCVW_SAVEOPTIONS = SCCVW_START+1060;     
     SCCVW_GETRAWTEXT = SCCVW_START+1061;     
     SCCVW_FINDANNOTATION = SCCVW_START+1062;     
     SCCVW_FINDPOSITION = SCCVW_START+1063;     
     SCCVW_MAPPOSITION = SCCVW_START+1064;     
     SCCVW_SETSELECTION = SCCVW_START+1065;     
     SCCVW_DISPLAYPOSITION = SCCVW_START+1066;     
     SCCVW_COPY = SCCVW_START+1067;     
     SCCVW_HILITESTYLE = SCCVW_START+1068;     
     SCCVW_HSCROLL = SCCVW_START+1069;     
     SCCVW_VSCROLL = SCCVW_START+1070;     
     SCCVW_COMPPOSITIONS = SCCVW_START+1071;     
     SCCVW_GETPROPERTYSHEETPAGE = SCCVW_START+1072;     
     SCCVW_INITPROPERTYSHEETPAGES = SCCVW_START+1073;     
     SCCVW_DEINITPROPERTYSHEETPAGES = SCCVW_START+1074;     
     SCCVW_VIEWAS = SCCVW_START+1075;     
     SCCVW_GETHIOFILE = SCCVW_START+1076;     
     SCCVW_GETANNOTATIONDATA = SCCVW_START+1077;     
     SCCVW_STATUS = SCCVW_START+1078;     
     SCCVW_GETIDEALWINDOWSIZE = SCCVW_START+1079;     
     SCCVW_GETDRAWPAGEINFO = SCCVW_START+1080;     
     SCCVW_GETSECTIONCOUNTINFO = SCCVW_START+1081;     
     SCCVW_GETIDFIRSTCHANGE = SCCVW_START+1082;     
     SCCVW_GETTREECOUNT = SCCVW_START+1083;     
     SCCVW_GETTREENODE = SCCVW_START+1084;     
     SCCVW_SAVETREENODE = SCCVW_START+1085;     
     SCCVW_DRAMAMINE_TMVT_1 = SCCVW_START+1086;     
     SCCVW_DRAMAMINE_TMVT_2 = SCCVW_START+1087;     
     SCCVW_DRAMAMINE_TMVT_3 = SCCVW_START+1088;     
     SCCVW_DRAMAMINE_TMVT_4 = SCCVW_START+1089;     
     SCCVW_MAPTREEPOSITION = SCCVW_START+1090;     
     SCCVW_GETSECTIONNAME = SCCVW_START+1091;     
     SCCVW_WRAPDC = SCCVW_START+1092;     
     SCCVW_UNWRAPDC = SCCVW_START+1093;     
     SCCVW_SEARCHEX = SCCVW_START+1094;     
{$ifdef WINDOWS}
     SCCVW_SAVEFILE = SCCVW_START+1095;     
     SCCVW_GETEDITFILEHANDLE = SCCVW_START+1096;     
     SCCVW_GETEDITANNOTATIONLIST = SCCVW_START+1097;     
     SCCVW_REGISTEREDITSORTFUNCTION = SCCVW_START+1098;     
     SCCVW_STOREANNOTATIONS = SCCVW_START+1099;     
     SCCVW_LASTTOMESSAGE = SCCVW_START+1099;     
{$else}

  const
     SCCVW_LASTTOMESSAGE = SCCVW_START+1094;     
{$endif}
  {
    |  Messages FROM SCCVIEWER window
     }

  const
     SCCVW_FIRSTFROMMESSAGE = SCCVW_START+1100;     
     SCCVW_SELCHANGE = SCCVW_START+1105;     
     SCCVW_DISPLAYCHANGE = SCCVW_START+1107;     
     SCCVW_VIEWTHISFILE = SCCVW_START+1109;     
     SCCVW_FILECHANGE = SCCVW_START+1110;     
  { Legacy message, #define SCCVW_RAWTEXT           SCCVW_START+1111  }
     SCCVW_ANNOTATIONEVENT = SCCVW_START+1112;     
     SCCVW_OPTIONCHANGE = SCCVW_START+1113;     
     SCCVW_DOHELP = SCCVW_START+1114;     
     SCCVW_CONTEXTMENU = SCCVW_START+1115;     
     SCCVW_ENABLEAPP = SCCVW_START+1116;     
     SCCVW_SETVSCROLLPOSITION = SCCVW_START+1117;     
     SCCVW_SETVSCROLLPAGESIZE = SCCVW_START+1118;     
     SCCVW_SETVSCROLLRANGE = SCCVW_START+1119;     
     SCCVW_SETVSCROLLSTATE = SCCVW_START+1120;     
     SCCVW_SETHSCROLLPOSITION = SCCVW_START+1121;     
     SCCVW_SETHSCROLLPAGESIZE = SCCVW_START+1122;     
     SCCVW_SETHSCROLLRANGE = SCCVW_START+1123;     
     SCCVW_SETHSCROLLSTATE = SCCVW_START+1124;     
     SCCVW_KEYDOWN = SCCVW_START+1125;     
  { Windows Only  }
     SCCVW_WM_HELP = SCCVW_START+1126;     
  { Windows Only  }
     SCCVW_WM_CONTEXTMENU = SCCVW_START+1127;     
     SCCVW_RAWTEXTEVENT = SCCVW_START+1128;     
     SCCVW_BAILOUT = SCCVW_START+1129;     
     SCCVW_READAHEADDONE = SCCVW_START+1130;     
     SCCVW_TMPCREATE = SCCVW_START+1131;     
     SCCVW_MAPPROB = SCCVW_START+1132;     
     SCCVW_SETVSCROLLRANGEMIN = SCCVW_START+1135;     
     SCCVW_SETVSCROLLRANGEMAX = SCCVW_START+1136;     
     SCCVW_GETFILEACCESSDATA = SCCVW_START+1137;     
  { Must be updated with each message added  }
     SCCVW_LASTFROMMESSAGE = SCCVW_START+1137;     
  {
    |  Messages TO SCCVIEWER window for Dramamine
     }
     SCCVW_DRAMAMINE_FIRSTTOMESSAGE = SCCVW_START+2000;     
     SCCVW_DRAMAMINE_1 = SCCVW_START+2000;     
     SCCVW_DRAMAMINE_LASTTOMESSAGE = SCCVW_START+2000;     
  {
    |  SCCVWVIEWFILE structure
     }

  type

     PSCCVWVIEWFILE40 = ^SCCVWVIEWFILE40;
     SCCVWVIEWFILE40 = record
          dwSize : VTDWORD;
          dwSpecType : VTDWORD;
          pSpec : PVTVOID;
          dwViewAs : VTDWORD;
          bUseDisplayName : VTBOOL;
          szDisplayName : array[0..(SCCVW_DISPLAYNAMEMAX)-1] of VTTCHAR;
          bDeleteOnClose : VTBOOL;
          dwFlags : VTDWORD;
{$ifdef WIN64}
          dwReserved1 : DWORD_PTR;
          dwReserved2 : DWORD_PTR;
{$else}
          dwReserved1 : VTDWORD;
          dwReserved2 : VTDWORD;
{$endif}
       end;
     PPSCCVWVIEWFILE40 = ^PSCCVWVIEWFILE40;

  type

     PSCCVWVIEWFILE80 = ^SCCVWVIEWFILE80;
     SCCVWVIEWFILE80 = record
          dwSize : VTDWORD;
          dwSpecType : VTDWORD;
          pSpec : PVTVOID;
          dwViewAs : VTDWORD;
          bUseDisplayName : VTBOOL;
          szDisplayName : array[0..(SCCVW_DISPLAYNAMEMAX)-1] of VTWORD;
          bDeleteOnClose : VTBOOL;
          dwFlags : VTDWORD;
{$ifdef WIN64}
          dwReserved1 : DWORD_PTR;
          dwReserved2 : DWORD_PTR;
{$else}
          dwReserved1 : VTDWORD;
          dwReserved2 : VTDWORD;
{$endif}
       end;
     PPSCCVWVIEWFILE80 = ^PSCCVWVIEWFILE80;
  { Possible values for dwFlags above  }
  { Indicates dwReserved1 points to a bookmark name  }

  const
     SCCVW_GOTOBOOKMARK = $00000001;
  {
    |
    |  SCCVWFILEINFO structure
    |
     }

  type

     PSCCVWFILEINFO40 = ^SCCVWFILEINFO40;
     SCCVWFILEINFO40 = record
          dwSize : VTDWORD;
          szDisplayName : array[0..(SCCVW_DISPLAYNAMEMAX)-1] of VTTCHAR;
          dwFileId : VTDWORD;
          szFileIdName : array[0..(SCCVW_FILEIDNAMEMAX)-1] of VTTCHAR;
          szFileName : array[0..(SCCVW_FILENAMEMAX)-1] of VTTCHAR;
       end;
     PPSCCVWFILEINFO40 = ^PSCCVWFILEINFO40;

     PSCCVWFILEINFO80 = ^SCCVWFILEINFO80;
     SCCVWFILEINFO80 = record
          dwSize : VTDWORD;
          szDisplayName : array[0..(SCCVW_DISPLAYNAMEMAX)-1] of VTWORD;
          dwFileId : VTDWORD;
          szFileIdName : array[0..(SCCVW_FILEIDNAMEMAX)-1] of VTWORD;
          szFileName : array[0..(SCCVW_FILENAMEMAX)-1] of VTWORD;
       end;
     PPSCCVWFILEINFO80 = ^PSCCVWFILEINFO80;
  {
     | SCCVWGETPROP  structure
      }
  { [IN] structure size in bytes  }
  { [IN or OUT] property name ID  }
  { [IN] pointer to buffer to receive property name (name in unicode WCHARS, 2 bytes long)  }
  { [IN/OUT] IN: size of pName in bytes. OUT: Bytes copied into pName }
  { [IN] pointer to buffer to receive property data  }
  { [IN/OUT] IN: size of pData in bytes. OUT: Bytes copied into pData }
  { [OUT] type of data in pData  }

     PSCCVWGETPROP = ^SCCVWGETPROP;
     SCCVWGETPROP = record
          dwSize : VTDWORD;
          dwPropId : VTDWORD;
          pName : VTLPVOID;
          dwNameSize : VTDWORD;
          pData : VTLPVOID;
          dwDataSize : VTDWORD;
          dwDataType : VTDWORD;
       end;
     PPSCCVWGETPROP = ^PSCCVWGETPROP;

  const
     SCCVW_GETPROP_FIRST = 0;
     SCCVW_GETPROP_NEXT = 1;
     SCCVW_GETPROP_PREV = 2;
     SCCVW_GETPROP_BYID = 3;
     SCCVW_GETPROP_BYINDEX = 4;
     SCCVW_PROPTYPE_UNKNOWN = 0;
     SCCVW_PROPTYPE_STRING = 1;
  {
     | SCCVWPOS  structure
      }

  type

     PSCCVWPOS = ^SCCVWPOS;
     SCCVWPOS = SCCPOS;
     PPSCCVWPOS = ^PSCCVWPOS;
  {
    |
    |  SCCVWSEARCHINFO structure
    |
     }

     PSCCVWSEARCHINFO40 = ^SCCVWSEARCHINFO40;
     SCCVWSEARCHINFO40 = record
          dwSize : VTDWORD;
          siText : array[0..79] of VTTCHAR;
          siTextLen : VTWORD;
          siType : VTWORD;
          siFrom : VTWORD;
          siDirection : VTWORD;
       end;
     PPSCCVWSEARCHINFO40 = ^PSCCVWSEARCHINFO40;

     PSCCVWSEARCHINFO80 = ^SCCVWSEARCHINFO80;
     SCCVWSEARCHINFO80 = record
          dwSize : VTDWORD;
          siText : array[0..79] of VTWORD;
          siTextLen : VTWORD;
          siType : VTWORD;
          siFrom : VTWORD;
          siDirection : VTWORD;
       end;
     PPSCCVWSEARCHINFO80 = ^PSCCVWSEARCHINFO80;
  {
    |  Possible values for siType in SCCVWSEARCHINFO
     }

  const
     SCCVW_SEARCHCASE = $0001;
     SCCVW_SEARCHNOCASE = $0002;
  {
    |  Possible values for siFrom in SCCVWSEARCHINFO
     }
     SCCVW_SEARCHTOP = $0001;
     SCCVW_SEARCHBOTTOM = $0002;
     SCCVW_SEARCHCURRENT = $0004;
  {
    |  Possible values for siDirection in the SCCVWSEARCHINFO structure
    |  and wParam in SCCVW_SEARCHNEXT message
     }
  {used only in SCCVW_SEARCHNEXT message  }
     SCCVW_SEARCHSAME = $0000;
     SCCVW_SEARCHFORWARD = $0001;
     SCCVW_SEARCHBACK = $0002;
  {
    |
    |  SCCVWVIEWTHISFILE structure
    |
     }

  type

     PSCCVWVIEWTHISFILE40 = ^SCCVWVIEWTHISFILE40;
     SCCVWVIEWTHISFILE40 = record
          dwSize : VTDWORD;
          sViewFile : SCCVWVIEWFILE40;
          wFileTime : VTWORD;
          wFileDate : VTWORD;
          dwFileSize : VTDWORD;
       end;
     PPSCCVWVIEWTHISFILE40 = ^PSCCVWVIEWTHISFILE40;

     PSCCVWVIEWTHISFILE80 = ^SCCVWVIEWTHISFILE80;
     SCCVWVIEWTHISFILE80 = record
          dwSize : VTDWORD;
          sViewFile : SCCVWVIEWFILE80;
          wFileTime : VTWORD;
          wFileDate : VTWORD;
          dwFileSize : VTDWORD;
       end;
     PPSCCVWVIEWTHISFILE80 = ^PSCCVWVIEWTHISFILE80;
  {
    |
    |  SCCVWDISPLAYINFO structure
    |
     }

  const
     MAX_DISPLAYINFO_SZNAME_SIZE = 128;

  type

     PSCCVWDISPLAYINFO40 = ^SCCVWDISPLAYINFO40;
     SCCVWDISPLAYINFO40 = record
          dwSize : VTDWORD;
          szName : array[0..(MAX_DISPLAYINFO_SZNAME_SIZE)-1] of VTTCHAR;
          hMenu : VTSYSPARAM;
          dwFunctions : VTDWORD;
          dwType : VTDWORD;
       end;
     PPSCCVWDISPLAYINFO40 = ^PSCCVWDISPLAYINFO40;

     PSCCVWDISPLAYINFO80 = ^SCCVWDISPLAYINFO80;
     SCCVWDISPLAYINFO80 = record
          dwSize : VTDWORD;
          szName : array[0..(MAX_DISPLAYINFO_SZNAME_SIZE)-1] of VTWORD;
          hMenu : VTSYSPARAM;
          dwFunctions : VTDWORD;
          dwType : VTDWORD;
       end;
     PPSCCVWDISPLAYINFO80 = ^PSCCVWDISPLAYINFO80;
  {
    |  Possible values for dwType in SCCVWDISPLAYINFO
     }
  { no file open in this view  }

  const
     SCCVWTYPE_NONE = 1;
  { unknown section type  }
     SCCVWTYPE_UNKNOWN = 2;
  { word processor section  }
     SCCVWTYPE_WP = 3;
  { spreadsheet section  }
     SCCVWTYPE_SS = 4;
  { database section  }
     SCCVWTYPE_DB = 5;
  { hex view of any file  }
     SCCVWTYPE_HEX = 6;
  { bitmap image  }
     SCCVWTYPE_IMAGE = 7;
  { archive  }
     SCCVWTYPE_ARCHIVE = 8;
  { bitmap image  }
     SCCVWTYPE_VECTOR = 9;
  { sound file  }
     SCCVWTYPE_SOUND = 10;
  {
     | SCCVWCOLORREF structure
     | This structure should be set using the SCCVWRGB macro.
      }

  type

     PSCCVWCOLORREF = ^SCCVWCOLORREF;
     SCCVWCOLORREF = SCCANNOCOLORREF;

  function SCCVWRGB(r,g,b : VTBYTE): SCCANNOCOLORREF;

  {
      |   Flags in wParam of SCCVW_FILECHANGE
       }
  { File was closed  }

  const
     SCCVW_FC_CLOSED = $0001;
  { File was opened  }
     SCCVW_FC_OPENED = $0002;
  {
  #define SCCVW_FC_INOPEN     (0x0004      )
                                                                          |   When used with SCCVW_FC_CLOSED means that the close
                                          |   is in response to an SCCVW_VIEWFILE message and another
                                                                          |   SCCVW_FILECHANGE can be expected.
                                                                          |   Use this flag to avoid flashy UI
                                                                           }
  {
    |
    |  SCCVWFONTSPEC structure
    |
     }

  type

     PSCCVWFONTSPEC = ^SCCVWFONTSPEC;
     SCCVWFONTSPEC = record
          szFace : array[0..39] of VTTCHAR;
          wHeight : VTWORD;
          wAttr : VTWORD;
          wType : VTWORD;
       end;
     LPSCCVWFONTSPEC = PSCCVWFONTSPEC;
     PLPSCCVWFONTSPEC = ^LPSCCVWFONTSPEC;

  const
     SCCVW_CHARATTR_NORMAL = $0000;
     SCCVW_CHARATTR_UNDERLINE = $0001;
     SCCVW_CHARATTR_ITALIC = $0002;
     SCCVW_CHARATTR_BOLD = $0004;
     SCCVW_CHARATTR_STRIKEOUT = $0008;
     SCCVW_CHARATTR_SMALLCAPS = $0010;
     SCCVW_CHARATTR_OUTLINE = $0020;
     SCCVW_CHARATTR_SHADOW = $0040;
     SCCVW_CHARATTR_CAPS = $0080;
     SCCVW_CHARATTR_SUBSCRIPT = $0100;
     SCCVW_CHARATTR_SUPERSCRIPT = $0200;
     SCCVW_CHARATTR_DUNDERLINE = $0400;
     SCCVW_CHARATTR_WORDUNDERLINE = $0800;
     SCCVW_CHARATTR_DOTUNDERLINE = $1000;
     SCCVW_CHARATTR_DASHUNDERLINE = $2000;
  {
     |  General Font Specification
      }
     SCCVW_CHARSET_SHIFTJIS = $10;
     SCCVW_CHARSET_HANGEUL = $11;
     SCCVW_CHARSET_CHINESEBIG5 = $12;
     SCCVW_CHARSET_ANSI = $13;
     SCCVW_CHARSET_OEM = $14;
     SCCVW_CHARSET_MAC = $15;
     SCCVW_CHARSET_SYMBOL = $16;
     SCCVW_CHARSET_GB2312 = $17;
     SCCVW_CHARSET_HEBREW = $18;
     SCCVW_CHARSET_ARABIC = $19;
     SCCVW_CHARSET_GREEK = $1A;
     SCCVW_CHARSET_TURKISH = $1B;
     SCCVW_CHARSET_THAI = $1C;
     SCCVW_CHARSET_EASTEUROPE = $1D;
     SCCVW_CHARSET_RUSSIAN = $1E;
     SCCVW_CHARSET_BALTIC = $1F;
  {
     |  SCCVWGETRAWTEXT50 structure
      }

  type

     PSCCVWGETRAWTEXT50 = ^SCCVWGETRAWTEXT50;
     SCCVWGETRAWTEXT50 = record
          dwSize : VTDWORD;
          dwOptions : VTDWORD;
          dwACC : VTDWORD;
          hText : VTHANDLE;
          dwCharCount : VTDWORD;
          dwCharSet : VTDWORD;
          dwTextBufSize : VTDWORD;
          dwTextOffset : VTDWORD;
       end;
     PPSCCVWGETRAWTEXT50 = ^PSCCVWGETRAWTEXT50;
  {
    |  wParams for SCCVW_ADDANNOTATION message
     }

  const
     SCCVW_HILITETEXT = SCCANNO_HILITETEXT;
     SCCVW_INSERTICON = SCCANNO_INSERTICON;
     SCCVW_HIDETEXT = SCCANNO_HIDETEXT;
     SCCVW_INSERTBITMAP = SCCANNO_INSERTBITMAP;
     SCCVW_INSERTTEXT = SCCANNO_INSERTTEXT;
     SCCVW_INSERTPARABREAK = SCCANNO_INSERTPARABREAK;
     SCCVW_HIDEPARABREAK = SCCANNO_HIDEPARABREAK;
  {
    |
    |  SCCVWHIDETEXT* structures
    |
     }

  type

     PSCCVWHIDETEXT40 = ^SCCVWHIDETEXT40;
     SCCVWHIDETEXT40 = SCCANNOHIDETEXT40;
     PPSCCVWHIDETEXT40 = ^PSCCVWHIDETEXT40;

     PSCCVWHIDETEXT41 = ^SCCVWHIDETEXT41;
     SCCVWHIDETEXT41 = SCCANNOHIDETEXT41;
     PPSCCVWHIDETEXT41 = ^PSCCVWHIDETEXT41;

     PSCCVWHIDETEXT80 = ^SCCVWHIDETEXT80;
     SCCVWHIDETEXT80 = SCCANNOHIDETEXT80;
     PPSCCVWHIDETEXT80 = ^PSCCVWHIDETEXT80;

     PSCCVWHIDETEXT81 = ^SCCVWHIDETEXT81;
     SCCVWHIDETEXT81 = SCCANNOHIDETEXT81;
     PPSCCVWHIDETEXT81 = ^PSCCVWHIDETEXT81;
  {
    |
    |  SCCVWHILITETEXT* structures
    |
     }

     PSCCVWHILITETEXT40 = ^SCCVWHILITETEXT40;
     SCCVWHILITETEXT40 = SCCANNOHILITETEXT40;
     PPSCCVWHILITETEXT40 = ^PSCCVWHILITETEXT40;

     PSCCVWHILITETEXT41 = ^SCCVWHILITETEXT41;
     SCCVWHILITETEXT41 = SCCANNOHILITETEXT41;
     PPSCCVWHILITETEXT41 = ^PSCCVWHILITETEXT41;

     PSCCVWHILITETEXT81 = ^SCCVWHILITETEXT81;
     SCCVWHILITETEXT81 = SCCANNOHILITETEXT81;
     PPSCCVWHILITETEXT81 = ^PSCCVWHILITETEXT81;
  {
   |  dwUser flags for internal annotations (bookmarks, hyperlinks, etc.)
    }

  const
     SCCVW_USERBOOKMARK = SCCANNO_USERBOOKMARK;
     SCCVW_USERHYPER = SCCANNO_USERHYPER;
     SCCVW_USERVWSEARCH = SCCANNO_USERVWSEARCH;
     SCCVW_USERSEARCH = SCCANNO_USERVWSEARCH;
     SCCVW_USERPAGE = SCCANNO_USERPAGE;
     SCCVW_USEROBJECT = SCCANNO_USEROBJECT;
  { Any of the above.  }
     SCCVW_LOOKINGFORNONTEXT = SCCANNO_LOOKINGFORNONTEXT;
  {
  | Internal use of dwDisplay
   }
     SCCVW_STYLESEARCH = SCCANNO_STYLESEARCH;
     SCCVW_STYLEOBJECT = SCCANNO_STYLEOBJECT;
     SCCVW_STYLEHYPER = SCCANNO_STYLEHYPER;
     SCCVW_STYLEBOOKMARK = SCCANNO_STYLEBOOKMARK;
  {
    |
    |  SCCVWINSERTICON* structures
    |
     }

  type

     PSCCVWINSERTICON40 = ^SCCVWINSERTICON40;
     SCCVWINSERTICON40 = SCCANNOINSERTICON40;
     PPSCCVWINSERTICON40 = ^PSCCVWINSERTICON40;

     PSCCVWINSERTICON41 = ^SCCVWINSERTICON41;
     SCCVWINSERTICON41 = SCCANNOINSERTICON41;
     PPSCCVWINSERTICON41 = ^PSCCVWINSERTICON41;

     PSCCVWINSERTICON81 = ^SCCVWINSERTICON81;
     SCCVWINSERTICON81 = SCCANNOINSERTICON81;
     PPSCCVWINSERTICON81 = ^PSCCVWINSERTICON81;
  {
    |
    |  SCCVWINSERTBITMAP42 structure
    |
     }

     PSCCVWINSERTBITMAP42 = ^SCCVWINSERTBITMAP42;
     SCCVWINSERTBITMAP42 = SCCANNOINSERTBITMAP42;
     PPSCCVWINSERTBITMAP42 = ^PSCCVWINSERTBITMAP42;

     PSCCVWINSERTBITMAP81 = ^SCCVWINSERTBITMAP81;
     SCCVWINSERTBITMAP81 = SCCANNOINSERTBITMAP81;
     PPSCCVWINSERTBITMAP81 = ^PSCCVWINSERTBITMAP81;
  {
    |
    |  SCCVWINSERTTEXT80 structure
    |
     }

     PSCCVWINSERTTEXT80 = ^SCCVWINSERTTEXT80;
     SCCVWINSERTTEXT80 = SCCANNOINSERTTEXT80;
     PPSCCVWINSERTTEXT80 = ^PSCCVWINSERTTEXT80;

     PSCCVWINSERTTEXT81 = ^SCCVWINSERTTEXT81;
     SCCVWINSERTTEXT81 = SCCANNOINSERTTEXT81;
     PPSCCVWINSERTTEXT81 = ^PSCCVWINSERTTEXT81;
  {
    |
    |  SCCVWINSERTPARABREAK80 structure
    |
     }

     PSCCVWINSERTPARABREAK80 = ^SCCVWINSERTPARABREAK80;
     SCCVWINSERTPARABREAK80 = SCCANNOINSERTPARABREAK80;
     PPSCCVWINSERTPARABREAK80 = ^PSCCVWINSERTPARABREAK80;

     PSCCVWINSERTPARABREAK81 = ^SCCVWINSERTPARABREAK81;
     SCCVWINSERTPARABREAK81 = SCCANNOINSERTPARABREAK81;
     PPSCCVWINSERTPARABREAK81 = ^PSCCVWINSERTPARABREAK81;
  {
    |
    |  SCCVWHIDEPARABREAK80 structure
    |
     }

     PSCCVWHIDEPARABREAK80 = ^SCCVWHIDEPARABREAK80;
     SCCVWHIDEPARABREAK80 = SCCANNOHIDEPARABREAK80;
     PPSCCVWHIDEPARABREAK80 = ^PSCCVWHIDEPARABREAK80;

     PSCCVWHIDEPARABREAK81 = ^SCCVWHIDEPARABREAK81;
     SCCVWHIDEPARABREAK81 = SCCANNOHIDEPARABREAK81;
     PPSCCVWHIDEPARABREAK81 = ^PSCCVWHIDEPARABREAK81;
  {
    |
    |  SCCVWANNOGEN structure
    |
     }

     PSCCVWANNOGEN = ^SCCVWANNOGEN;
     SCCVWANNOGEN = SCCANNOGEN;
     PPSCCVWANNOGEN = ^PSCCVWANNOGEN;
  { Flags that can be specified in the dwFlags portion of annotations <XXX>80 and higher.  }
  { This annotation is marked as undone.  }

  const
     SCCVWUNDONE = $00000001;
  {
     | SCCVWHILITESTYLE structure
      }

  type

     PSCCVWHILITESTYLE41 = ^SCCVWHILITESTYLE41;
     SCCVWHILITESTYLE41 = SCCANNOHILITESTYLE41;
     PPSCCVWHILITESTYLE41 = ^PSCCVWHILITESTYLE41;

     PSCCVWHILITESTYLE81 = ^SCCVWHILITESTYLE81;
     SCCVWHILITESTYLE81 = SCCANNOHILITESTYLE81;
     PPSCCVWHILITESTYLE81 = ^PSCCVWHILITESTYLE81;
  { dwOptions of SCCCVWHILITESTYLE  }

  const
     SCCVW_USEFOREGROUND = SCCANNO_USEFOREGROUND;
     SCCVW_USEBACKGROUND = SCCANNO_USEBACKGROUND;
     SCCVW_USECHARATTR = SCCANNO_USECHARATTR;
     SCCVW_USEUNDERLINECOLOR = SCCANNO_USEUNDERLINECOLOR;
     SCCVW_USETHINUNDERLINE = SCCANNO_USETHINUNDERLINE;
  {
    |
    |  SCCVW_ANNOTATIONEVENT
    |
     }

  type

     PSCCVWANNOTATIONEVENT40 = ^SCCVWANNOTATIONEVENT40;
     SCCVWANNOTATIONEVENT40 = SCCANNOTATIONEVENT40;
     PPSCCVWANNOTATIONEVENT40 = ^PSCCVWANNOTATIONEVENT40;

     PSCCVWANNOTATIONEVENT41 = ^SCCVWANNOTATIONEVENT41;
     SCCVWANNOTATIONEVENT41 = SCCANNOTATIONEVENT41;
     PPSCCVWANNOTATIONEVENT41 = ^PSCCVWANNOTATIONEVENT41;

  const
     SCCVW_EVENTSINGLECLICK = SCCANNO_EVENTSINGLECLICK;
     SCCVW_EVENTDOUBLECLICK = SCCANNO_EVENTDOUBLECLICK;
     SCCVW_EVENTTRANSITIONINTO = SCCANNO_EVENTTRANSITIONINTO;     
     SCCVW_EVENTTRANSITIONOUTOF = SCCANNO_EVENTTRANSITIONOUTOF;     
  { Reserved for internal SCC use  }
     SCCVW_EVENTTRANSITION = SCCANNO_EVENTTRANSITION;     
     SCCVW_EVENTSINGLERIGHTCLICK = SCCANNO_EVENTSINGLERIGHTCLICK;     
  {
    |
    |  Location values for SCCVW_GOTOANNOTATION
    |
     }
     SCCVW_GOTOFIRST = 1;     
     SCCVW_GOTOLAST = 2;     
     SCCVW_GOTOPREV = 3;     
     SCCVW_GOTONEXT = 4;     
     SCCVW_MASK = SCCANNO_MASK;     
     SCCVW_ABSOLUTE = SCCANNO_ABSOLUTE;     
  {
    |  Return values for SCCVW_GOTOANNOTATION
     }
     SCCVW_FOUNDNONE = 0;     
     SCCVW_FOUNDOK = 3;     
  {
    |  dwDisplay values for SCCVWHILITETEXT
     }
     SCCVW_BDEFAULT = SCCANNO_BDEFAULT;     
     SCCVW_FDEFAULT = SCCANNO_FDEFAULT;     
     SCCVW_USESTYLE = SCCANNO_USESTYLE;     
     SCCVW_BBLACK = SCCANNO_BBLACK;     
     SCCVW_BDARKRED = SCCANNO_BDARKRED;     
     SCCVW_BDARKGREEN = SCCANNO_BDARKGREEN;     
     SCCVW_BDARKYELLOW = SCCANNO_BDARKYELLOW;     
     SCCVW_BDARKBLUE = SCCANNO_BDARKBLUE;     
     SCCVW_BDARKMAGENTA = SCCANNO_BDARKMAGENTA;     
     SCCVW_BDARKCYAN = SCCANNO_BDARKCYAN;     
     SCCVW_BLIGHTGRAY = SCCANNO_BLIGHTGRAY;     
     SCCVW_BGRAY = SCCANNO_BGRAY;     
     SCCVW_BRED = SCCANNO_BRED;     
     SCCVW_BGREEN = SCCANNO_BGREEN;     
     SCCVW_BYELLOW = SCCANNO_BYELLOW;     
     SCCVW_BBLUE = SCCANNO_BBLUE;     
     SCCVW_BMAGENTA = SCCANNO_BMAGENTA;     
     SCCVW_BCYAN = SCCANNO_BCYAN;     
     SCCVW_BWHITE = SCCANNO_BWHITE;     
     SCCVW_FBLACK = SCCANNO_FBLACK;     
     SCCVW_FDARKRED = SCCANNO_FDARKRED;     
     SCCVW_FDARKGREEN = SCCANNO_FDARKGREEN;     
     SCCVW_FDARKYELLOW = SCCANNO_FDARKYELLOW;     
     SCCVW_FDARKBLUE = SCCANNO_FDARKBLUE;     
     SCCVW_FDARKMAGENTA = SCCANNO_FDARKMAGENTA;     
     SCCVW_FDARKCYAN = SCCANNO_FDARKCYAN;     
     SCCVW_FLIGHTGRAY = SCCANNO_FLIGHTGRAY;     
     SCCVW_FGRAY = SCCANNO_FGRAY;     
     SCCVW_FRED = SCCANNO_FRED;     
     SCCVW_FGREEN = SCCANNO_FGREEN;     
     SCCVW_FYELLOW = SCCANNO_FYELLOW;     
     SCCVW_FBLUE = SCCANNO_FBLUE;     
     SCCVW_FMAGENTA = SCCANNO_FMAGENTA;     
     SCCVW_FCYAN = SCCANNO_FCYAN;     
     SCCVW_FWHITE = SCCANNO_FWHITE;     
  {
     | SCCVWFINDANNOTATION41 structure
      }

  type

     PSCCVWFINDANNOTATION41 = ^SCCVWFINDANNOTATION41;
     SCCVWFINDANNOTATION41 = SCCANNOFINDANNOTATION41;
     PPSCCVWFINDANNOTATION41 = ^PSCCVWFINDANNOTATION41;
  {
     | dwFindOptions for SCCVWFINDANNOTATION
     | note: can be or'ed with SCCVW_ABSOLUTE or SCCVW_MASK
      }

  const
     SCCVW_FINDFIRST = SCCANNO_FINDFIRST;     
     SCCVW_FINDLAST = SCCANNO_FINDLAST;     
     SCCVW_FINDPREV = SCCANNO_FINDPREV;     
     SCCVW_FINDNEXT = SCCANNO_FINDNEXT;     
     SCCVW_FINDFIRSTFROMPOS = SCCANNO_FINDFIRSTFROMPOS;     
  {
      | SCCVWGETANNOTATIONDATA
       }

  type

     PSCCVWGETANNOTATIONDATA = ^SCCVWGETANNOTATIONDATA;
     SCCVWGETANNOTATIONDATA = record
          dwSize : VTDWORD;
          dwUser : VTDWORD;
          dwData : VTDWORD;
          dwResultDataSize : VTDWORD;
          pData : PVTVOID;
          dwDataType : VTDWORD;
       end;
     PPSCCVWGETANNOTATIONDATA = ^PSCCVWGETANNOTATIONDATA;
  { Possible values returned in dwDataType above  }

  const
     ADTYPE_NODATA = 0;
     ADTYPE_URL = 1;
     ADTYPE_BOOKMARK = 2;
     ADTYPE_FTDFOBJ = 3;

  type

     PSCCVWFTDFOBJECTTAGDATA = ^SCCVWFTDFOBJECTTAGDATA;
     SCCVWFTDFOBJECTTAGDATA = record
          dwObjectId : VTDWORD;
          dwOffset : VTDWORD;
          szReference : array[0..255] of VTBYTE;
       end;
     PPSCCVWFTDFOBJECTTAGDATA = ^PSCCVWFTDFOBJECTTAGDATA;
  {
     | SCCVWFINDPOSITION41 structure
      }

     PSCCVWFINDPOSITION41 = ^SCCVWFINDPOSITION41;
     SCCVWFINDPOSITION41 = record
          dwSize : VTDWORD;
          dwFindOptions : VTDWORD;
          sSearchPos : SCCVWPOS;
          sResultPos : SCCVWPOS;
       end;
     PPSCCVWFINDPOSITION41 = ^PSCCVWFINDPOSITION41;
  {
     | dwFindOptions for SCCVW_FINDPOSITION
      }

  const
     SCCVW_FINDFIRSTPOS = 1;
     SCCVW_FINDLASTPOS = 2;
     SCCVW_FINDPREVPOS = 3;
     SCCVW_FINDNEXTPOS = 4;
     SCCVW_FINDANCHORSELECTPOS = 5;
     SCCVW_FINDENDSELECTPOS = 6;
     SCCVW_FINDSTARTDISPLAYPOS = 7;
     SCCVW_FINDENDDISPLAYPOS = 8;
     SCCVW_FINDSTARTLINEPOS = 9;
     SCCVW_FINDENDLINEPOS = 10;
     SCCVW_FINDPREVLINEPOS = 11;
     SCCVW_FINDNEXTLINEPOS = 12;
     SCCVW_FINDPREVWORDPOS = 13;
     SCCVW_FINDNEXTWORDPOS = 14;
     SCCVW_FINDPREVSECTION = 15;
     SCCVW_FINDNEXTSECTION = 16;
     SCCVW_FINDNEXTSELECTPOS = 17;
     SCCVW_FINDPREVSELECTPOS = 18;
  {
     | SCCVWMAPPOSITION41 structure
      }

  type

     PSCCVWMAPPOSITION41 = ^SCCVWMAPPOSITION41;
     SCCVWMAPPOSITION41 = record
          dwSize : VTDWORD;
          dwMapOptions : VTDWORD;
          sPos : SCCVWPOS;
          dwACC : VTDWORD;
       end;
     PPSCCVWMAPPOSITION41 = ^PSCCVWMAPPOSITION41;
  {
     | dwMapOptions for SCCVW_MAPPOSITION
      }

  const
     SCCVW_MAPACCTOPOS = $0001;
     SCCVW_MAPPOSTOACC = $0002;
  {
      |   SCCVWMAPTREEPOSITION60 structure
       }

  type

     PSCCVWMAPTREEPOSITION60 = ^SCCVWMAPTREEPOSITION60;
     SCCVWMAPTREEPOSITION60 = record
          dwSize : VTDWORD;
          dwMapOptions : VTDWORD;
          sPos : SCCVWPOS;
          dwNode : VTDWORD;
       end;
     PPSCCVWMAPTREEPOSITION60 = ^PSCCVWMAPTREEPOSITION60;
  {
      |   SCCVWMAPTREEPOSITION82 structure
       }

     PSCCVWMAPTREEPOSITION82 = ^SCCVWMAPTREEPOSITION82;
     SCCVWMAPTREEPOSITION82 = record
          dwSize : VTDWORD;
          dwMapOptions : VTDWORD;
          sPos : SCCVWPOS;
          dwNode : VTDWORD;
          dwRecordNum : VTDWORD;
       end;
     PPSCCVWMAPTREEPOSITION82 = ^PSCCVWMAPTREEPOSITION82;
  {
      |   dwMapOptions for SCCVW_MAPTREEPOSITION
       }

  const
     SCCVW_MAPNODETOPOS = $0001;
     SCCVW_MAPPOSTONODE = $0002;
  {
     | SCCVWSETSELECTION41 structure
      }

  type

     PSCCVWSETSELECTION41 = ^SCCVWSETSELECTION41;
     SCCVWSETSELECTION41 = record
          dwSize : VTDWORD;
          sAnchorPos : SCCVWPOS;
          sEndPos : SCCVWPOS;
       end;
     PPSCCVWSETSELECTION41 = ^PSCCVWSETSELECTION41;
  {
     | SCCVWDISPLAYPOSITION41 structure
      }

     PSCCVWDISPLAYPOSITION41 = ^SCCVWDISPLAYPOSITION41;
     SCCVWDISPLAYPOSITION41 = record
          dwSize : VTDWORD;
          dwDisplayOptions : VTDWORD;
          sPos : SCCVWPOS;
       end;
     PPSCCVWDISPLAYPOSITION41 = ^PSCCVWDISPLAYPOSITION41;
  {
     | SCCVWCOMPPOSITIONS structure
      }

     PSCCVWCOMPPOSITIONS41 = ^SCCVWCOMPPOSITIONS41;
     SCCVWCOMPPOSITIONS41 = record
          pPosA : PSCCVWPOS;
          pPosB : PSCCVWPOS;
       end;
     PPSCCVWCOMPPOSITIONS41 = ^PSCCVWCOMPPOSITIONS41;
  {
     | dwDisplayOptions for SCCVW_DISPLAYOPTIONS
      }

  const
     SCCVW_DISPLAYNEARTOP = $00000001;
     SCCVW_DISPLAYNEARMIDDLE = $00000002;
     SCCVW_DISPLAYNEARBOTTOM = $00000004;
  {
    |  return values for SCCVW_KEYDOWN
     }
     SCCVW_DOKEY = 0;
     SCCVW_IGNOREKEY = 1;
  {
     | SCCVWCOPY41 structure
      }

  type

     PSCCVWCOPY41 = ^SCCVWCOPY41;
     SCCVWCOPY41 = record
          dwSize : VTDWORD;
          dwOptions : VTDWORD;
          dwFormatId : VTDWORD;
          sStartPos : SCCVWPOS;
          sEndPos : SCCVWPOS;
          dwDataHandle : VTHANDLE;
          dwDataSize : VTDWORD;
          dwMessageId : VTDWORD;
       end;
     PPSCCVWCOPY41 = ^PSCCVWCOPY41;
  {
    |
    |  Flags returned by the SCCVW_GETCLIPINFO message
    |
     }

  const
     SCCVW_NOTREADYCOPYTOCLIP = $0000;
     SCCVW_CANCOPYTOCLIP = $0001;
     SCCVW_CANCUTTOCLIP = $0002;
     SCCVW_CANPASTEFROMCLIP = $0004;
  {
    |
    |  Error values
    |
     }
//{$include "sccerr.h"}

  const
     SCCVWERR_OK = SCCERR_OK;
     SCCVWERR_INVALIDID = SCCERR_INVALIDID;
     SCCVWERR_FILTERLOADFAILED = SCCERR_FILTERLOADFAILED;
     SCCVWERR_FILTERALLOCFAILED = SCCERR_FILTERALLOCFAILED;
     SCCVWERR_NOFILTER = SCCERR_NOFILTER;
     SCCVWERR_DISPLAYINITFAILED = SCCERR_DISPLAYINITFAILED;
     SCCVWERR_CHUNKERINITFAILED = SCCERR_CHUNKERINITFAILED;
     SCCVWERR_FILEOPENFAILED = SCCERR_FILEOPENFAILED;
     SCCVWERR_UNKNOWNFAILURE = SCCERR_LEG_UNKNOWNFAILURE;     
     SCCVWERR_BADFILE = SCCERR_BADFILE;     
     SCCVWERR_EMPTYFILE = SCCERR_EMPTYFILE;     
     SCCVWERR_PROTECTEDFILE = SCCERR_PROTECTEDFILE;     
     SCCVWERR_DRMFILE = SCCERR_DRMFILE;     
     SCCVWERR_UNSUPPORTEDCOMPRESSION = SCCERR_UNSUPPORTEDCOMPRESSION;     
     SCCVWERR_SUPFILEOPENFAILED = SCCERR_SUPFILEOPENFAILED;     
     SCCVWERR_ALLOCFAILED = SCCERR_ALLOCFAILED;     
     SCCVWERR_UNSUPPORTEDFORMAT = SCCERR_UNSUPPORTEDFORMAT;     
     SCCVWERR_BADPARAM = SCCERR_BADPARAM;     
     SCCVWERR_NOFILE = SCCERR_NOFILE;     
     SCCVWERR_FEATURENOTAVAIL = SCCERR_FEATURENOTAVAIL;     
     SCCVWERR_UNKNOWN = SCCERR_UNKNOWN;     
     SCCVWERR_NODISPLAYENGINE = SCCERR_NODISPLAYENGINE;     
     SCCVWERR_CANCEL = SCCERR_CANCEL;     
     SCCVWERR_NOINIT = SCCERR_NOINIT;     
     SCCVWERR_LASTPAGE = SCCERR_LASTPAGE;     
     SCCVWERR_NOPAGE = SCCERR_NOPAGE;     
     SCCVWERR_MESSAGEHANDLED = SCCERR_MESSAGEHANDLED;     
     SCCVWERR_NONEFOUND = SCCERR_NONEFOUND;     
     SCCVWERR_RAWTEXTDISABLED = SCCERR_RAWTEXTDISABLED;     
     SCCVWERR_FILTERTIMEOUT = SCCERR_FILTERTIMEOUT;     
     SCCVWERR_MACINITFAILED = SCCERR_MACINITFAILED;     
     SCCVWERR_OTHERPRINTING = SCCERR_OTHERPRINTING;     
     SCCVWERR_NODATATORENDER = SCCERR_NODATATORENDER;     
     SCCVWERR_BADCREDENTIALS = SCCERR_BADCREDENTIALS;     
     SCCVWERR_USEROFFSET = SCCERR_USEROFFSET;     
  {
    |
    |  BailOut Messages
    |
     }
     SCCVW_BAILOUT_MEMORY = SCCID_VWMESSAGE_MEMORY;
     SCCVW_BAILOUT_STREAMBAIL = SCCID_VWMESSAGE_STREAMBAIL;     
     SCCVW_BAILOUT_FILEOPENFAILED = SCCID_VWMESSAGE_FILEOPENFAILED;     
     SCCVW_BAILOUT_MISSINGELEMENT = SCCID_VWMESSAGE_MISSINGELEMENT;     
     SCCVW_BAILOUT_BADFILE = SCCID_VWMESSAGE_BADFILE;     
     SCCVW_BAILOUT_PROTECTEDFILE = SCCID_VWMESSAGE_PROTECTEDFILE;     
     SCCVW_BAILOUT_DRMFILE = SCCID_VWMESSAGE_DRMFILE;     
     SCCVW_BAILOUT_SUPFILEOPENFAILS = SCCID_VWMESSAGE_SUPFILEOPENFAILS;     
     SCCVW_BAILOUT_UNKNOWN = SCCID_VWMESSAGE_UNKNOWN;     
     SCCVW_BAILOUT_EMPTYFILE = SCCID_VWMESSAGE_EMPTYFILE;     
     SCCVW_BAILOUT_EMPTYSECTION = SCCID_VWMESSAGE_EMPTYSECTION;     
     SCCVW_BAILOUT_NOFILTER = SCCID_VWMESSAGE_NOFILTER;     
     SCCVW_BAILOUT_WRITEERROR = SCCID_VWMESSAGE_WRITEERROR;     
     SCCVW_BAILOUT_FILECHANGED = SCCID_VWMESSAGE_FILECHANGED;     
     SCCVW_BAILOUT_GPFAULT = SCCID_VWMESSAGE_GPFAULT;     
     SCCVW_BAILOUT_DIVIDEBYZERO = SCCID_VWMESSAGE_DIVIDEBYZERO;     
     SCCVW_BAILOUT_NOSUPPORTEDFILE = SCCID_VWMESSAGE_NOSUPPORTEDFILE;     
     SCCVW_BAILOUT_OTHEREXCEPTION = SCCID_VWMESSAGE_OTHEREXCEPTION;     
     SCCVW_BAILOUT_NOENGINE = SCCID_VWMESSAGE_NOENGINE;     
     SCCVW_BAILOUT_NODATATORENDER = SCCID_VWMESSAGE_NODATATORENDER;     
     SCCVW_BAILOUT_UNKNOWNNOTVIEWED = SCCID_VWMESSAGE_UNKNOWNNOTVIEWED;     
     SCCVW_BAILOUT_FILTERTIMEOUT = SCCID_VWMESSAGE_FILTERTIMEOUT;     
     SCCVW_BAILOUT_CANCEL = SCCID_VWMESSAGE_CANCEL;     
     SCCVW_BAILOUT_BADCREDENTIALS = SCCID_VWMESSAGE_BADCREDENTIALS;     
  {
    |
    |  SCCVWOPTIONSPEC structure
    |
     }

  type

     PSCCVWOPTIONSPEC40 = ^SCCVWOPTIONSPEC40;
     SCCVWOPTIONSPEC40 = record
          dwSize : VTDWORD;
          dwId : VTDWORD;
          dwFlags : VTDWORD;
          pData : PVTVOID;
       end;
     PPSCCVWOPTIONSPEC40 = ^PSCCVWOPTIONSPEC40;

  const
     SCCVWOPTION_DEFAULT = $0001;
     SCCVWOPTION_CURRENT = $0002;
     SCCVWOPTION_ZOOMING = $0004;
  {
    |
    |  Option values
    |
     }
     SCCVW_WPMODE_DRAFT = 1;
     SCCVW_WPMODE_NORMAL = 2;
     SCCVW_WPMODE_PREVIEW = 3;
{$ifdef WIN32}
  {
  |   Win32 requires the use of ENHMETAFILEs to
  |   communicate with modern apps (Word, for instance)
   }
{$define USE_ENHMETAFILE}
{$endif}

  const
     SCCVW_CLIPFORMAT_TEXT = $00000001;
     SCCVW_CLIPFORMAT_RTF = $00000002;
     SCCVW_CLIPFORMAT_AMI2 = $00000004;
     SCCVW_CLIPFORMAT_AMI = $00000008;
     SCCVW_CLIPFORMAT_PROWRITE = $00000010;
     SCCVW_CLIPFORMAT_WORDSTAR = $00000020;
     SCCVW_CLIPFORMAT_LEGACY = $00000040;
     SCCVW_CLIPFORMAT_WINBITMAP = $00000080;
     SCCVW_CLIPFORMAT_WINDIB = $00000100;
     SCCVW_CLIPFORMAT_WINMETAFILE = $00000400;
     SCCVW_CLIPFORMAT_WINPALETTE = $00000200;
     SCCVW_CLIPFORMAT_MACPICT = $00000800;
     SCCVW_CLIPFORMAT_OS2METAFILE = $00001000;
     SCCVW_CLIPFORMAT_OS2BITMAP = $00002000;
     SCCVW_CLIPFORMAT_OS2PALETTE = $00004000;
     SCCVW_CLIPFORMAT_EPOCBITMAP = $00008000;
     SCCVW_CLIPFORMAT_UNICODE = $00010000;

     SCCVW_CLIPFORMAT_TIFF = $00020000; // if DARWIN

  const
     SCCVW_CLIPSUBFORMAT_TABLE = 0;
     SCCVW_CLIPSUBFORMAT_OPTIMIZEDTABS = 1;
     SCCVW_CLIPSUBFORMAT_TABS = 2;
     SCCVW_CLIPINCLUDE_CHARATTR = $0001;
     SCCVW_CLIPINCLUDE_CHARSIZE = $0002;
     SCCVW_CLIPINCLUDE_CHARFACE = $0004;
     SCCVW_CLIPINCLUDE_PARAINDENTALIGN = $0008;
     SCCVW_CLIPINCLUDE_PARASPACING = $0010;
     SCCVW_CLIPINCLUDE_TABSTOPS = $0020;
     SCCVW_CLIPINCLUDE_PAGEBREAKS = $0040;
     SCCVW_FITMODE_ORIGINAL = 1;
     SCCVW_FITMODE_WINDOW = 2;
     SCCVW_FITMODE_WINDOWHEIGHT = 3;
     SCCVW_FITMODE_WINDOWWIDTH = 4;
     SCCVW_FITMODE_STRETCHWINDOW = 5;
     SCCVW_FITMODE_BEST = 6;
     SCCVW_ROTATION_NONE = 0;
     SCCVW_ROTATION_90 = 90;
     SCCVW_ROTATION_180 = 180;
     SCCVW_ROTATION_270 = 270;
     SCCVW_DITHER_ON = 1;
     SCCVW_DITHER_OFF = 2;
     SCCVW_PRINTASPECT_ORIGINAL = 1;
     SCCVW_PRINTASPECT_STRETCH = 2;
  { bit 0: 0=metric 1=English  }
     SCCVW_INTLUNITSMASK = $0001;
     SCCVW_ENGLISHUNITS = $0001;
  { bit 1: 0=24 hour time 1=12 hour time  }
     SCCVW_INTL24HOURMASK = $0002;
     SCCVW_12HOURTIME = $0002;

  type

     PSCCVWPRINTMARGINS = ^SCCVWPRINTMARGINS;
     SCCVWPRINTMARGINS = record
          dwTop : VTDWORD;
          dwBottom : VTDWORD;
          dwLeft : VTDWORD;
          dwRight : VTDWORD;
       end;
     PPSCCVWPRINTMARGINS = ^PSCCVWPRINTMARGINS;

  const
     SCCVW_PRINT_ALLPAGES = 1;
     SCCVW_PRINT_SELECTION = 2;
     SCCVW_PRINT_PAGERANGE = 3;
     SCCVW_PRINT_CURSECTION = 4;
     SCCVW_DIALOG_NOHELP = $0001;
     SCCVW_DIALOG_NOMORE = $0002;
     SCCVW_DIALOG_NO3D = $0004;
     SCCVW_DIALOG_NOADDOPTIONSTOMENU = $0008;
     SCCVW_DIALOG_NOADDDISPLAYTOMENU = $0010;
     SCCVW_DIALOG_NOADDPRINTTOMENU = $0020;
     SCCVW_DIALOG_NOADDCLIPBOARDTOMENU = $0040;
     SCCVW_DIALOG_NOADDDOPRINTTOMENU = $0080;
     SCCVW_DIALOG_NOADDDOCOPYTOMENU = $0100;
     SCCVW_DIALOG_NOADDFONTZOOMTOMENU = $0200;
     SCCVW_DIALOG_NOADDSHOWFULLSCREEN = $0400;
     SCCVW_DIALOG_NOADDHIDDENCELLSTOMENU = $0800;
     SCCVW_SYSTEM_RAWTEXT = $0001;
     SCCVW_SYSTEM_NOTIMER = $0002;
     SCCVW_SYSTEM_NOOPTIONSSAVE = $0004;
     SCCVW_SYSTEM_NOREADAHEAD = $0008;
     SCCVW_SYSTEM_UNICODE = $0010;
     SCCVW_SYSTEM_CJKADDON = $0020;
     SCCVW_SYSTEM_TEXTOUTPRINTERDRIVERBUG = $0040;
     SCCVW_SYSTEM_TEXTOUTDISPLAYDRIVERBUG = $0080;
     SCCVW_SYSTEM_NAMETEMPFILE = $0100;
     SCCVW_SYSTEM_NDELTMPFILES = $0200;
  {
  Special option support for CJK add-on system such as NJStar, CStar, TwinBridge
  Functional code are handled in dufont.
  Not documented in Viewer Spec, because we have not published this one yet.
   }
     SCCVW_OLE_ENABLEDRAGDROP = $0001;
     SCCVW_ARCHIVE_SAVENOP = 0;
     SCCVW_ARCHIVE_SAVESELECTION = 1;
     SCCVW_ARCHIVE_SAVEALL = 2;
     SCCVW_ARCHIVE_SAVETHIS = 3;
     SCCVW_ARCHIVE_VIEWTHIS = 4;

  type

     PSCCVWIMAGEZOOM = ^SCCVWIMAGEZOOM;
     SCCVWIMAGEZOOM = record
          dwXNu : VTDWORD;
          dwXDe : VTDWORD;
          dwYNu : VTDWORD;
          dwYDe : VTDWORD;
       end;
     PPSCCVWIMAGEZOOM = ^PSCCVWIMAGEZOOM;

  const
     SCCVW_2DIGITYEARS = 1;
     SCCVW_4DIGITYEARS = 2;
     SCCVW_REGISTRYYEARS = 3;
     SCCVW_SORT_NONE = 1;
     SCCVW_SORT_NAME = 2;
     SCCVW_SORT_SIZE = 3;
     SCCVW_SORT_DATE = 4;
     SCCVW_SORT_DESCENDING = $80000000;
     SCCVW_ARC_RESTOREPATH = $0001;
     SCCVW_ARC_HAVEPATH = $0002;
     SCCVW_ARCHIVE_PROMPTONCOLLISION = $00000001;
     SCCVW_ARCHIVE_PROMPTONILLEGALCHAR = $00000010;
     SCCVW_ZOOM_NOP = 0;
     SCCVW_ZOOM_IN = 1;
     SCCVW_ZOOM_OUT = 2;
     SCCVW_ZOOM_SELECTION = 3;
     SCCVW_ZOOM_RESET = 4;
  { Options for SS print SCCID_SSPRINTFITTOPAGE  }
     SCCVW_SSPRINTFITMODE_NOMAP = 0;
     SCCVW_SSPRINTFITMODE_FITTOPAGE = 1;
     SCCVW_SSPRINTFITMODE_FITTOWIDTH = 2;
     SCCVW_SSPRINTFITMODE_FITTOHEIGHT = 3;
     SCCVW_SSPRINTFITMODE_SCALE = 4;
     SCCVW_SSPRINTFITMODE_FITTOPAGES = 5;
  { Options for SS print SCCID_SSPRINTDIRECTION  }
     SCCVW_SSPRINTDIRECTION_ACROSS = 0;
     SCCVW_SSPRINTDIRECTION_DOWN = 1;
  { Options for DB print SCCID_DBPRINTFITTOPAGE  }
     SCCVW_DBPRINTFITMODE_NOMAP = 0;
     SCCVW_DBPRINTFITMODE_FITTOPAGE = 1;
     SCCVW_DBPRINTFITMODE_FITTOWIDTH = 2;
     SCCVW_DBPRINTFITMODE_FITTOHEIGHT = 3;
  { store the number of bytes in the "AM" string  }
  { store the number of bytes in the "PM" string  }

  type

     PSCCVWNUMBERFORMAT775 = ^SCCVWNUMBERFORMAT775;
     SCCVWNUMBERFORMAT775 = record
          cDecimalSep : VTTCHAR;
          cThousandSep : VTTCHAR;
          cDateSep : VTTCHAR;
          cTimeSep : VTTCHAR;
          szCurrencySymbol : array[0..7] of VTTCHAR;
          szAM : array[0..7] of VTTCHAR;
          szPM : array[0..7] of VTTCHAR;
          dwNumBytesAM : VTDWORD;
          dwNumBytesPM : VTDWORD;
          wCurrencyPosition : VTWORD;
          wShortDateOrder : VTWORD;
       end;
     PPSCCVWNUMBERFORMAT775 = ^PSCCVWNUMBERFORMAT775;
  { store the number of bytes in the "AM" string  }
  { store the number of bytes in the "PM" string  }

     PSCCVWNUMBERFORMAT = ^SCCVWNUMBERFORMAT;
     SCCVWNUMBERFORMAT = record
          cDecimalSep : VTTCHAR;
          cThousandSep : VTTCHAR;
          cDateSep : VTTCHAR;
          cTimeSep : VTTCHAR;
          szCurrencySymbol : array[0..7] of VTTCHAR;
          szAM : array[0..7] of VTTCHAR;
          szPM : array[0..7] of VTTCHAR;
          dwNumBytesAM : VTDWORD;
          dwNumBytesPM : VTDWORD;
          wCurrencyPosition : VTWORD;
          wShortDateOrder : VTWORD;
          wShortDateYearDigits : VTWORD;
          wShortDateMonthDigits : VTWORD;
          wShortDateDayDigits : VTWORD;
          wShortDateFlags : VTWORD;
       end;
     PPSCCVWNUMBERFORMAT = ^PSCCVWNUMBERFORMAT;
  { Currency symbol before the amount  }

  const
     SCCVW_CURRENCY_LEADS = $0001;
  { Currency symbol after the amount  }
     SCCVW_CURRENCY_TRAILS = $0000;
  { Space between currency and amount  }
     SCCVW_CURRENCY_SPACE = $0002;
  { No space between currency and amount  }
     SCCVW_CURRENCY_NOSPACE = $0000;
     SCCVW_DATEORDER_MDY = 0;
     SCCVW_DATEORDER_DMY = 1;
     SCCVW_DATEORDER_YMD = 2;

  type

     PSCCVWDAYNAMES = ^SCCVWDAYNAMES;
     SCCVWDAYNAMES = record
          aFullNames : array[0..6] of array[0..15] of VTWORD;
          aAbbrevNames : array[0..6] of array[0..15] of VTWORD;
       end;
     PPSCCVWDAYNAMES = ^PSCCVWDAYNAMES;

     PSCCVWMONTHNAMES = ^SCCVWMONTHNAMES;
     SCCVWMONTHNAMES = record
          aFullNames : array[0..12] of array[0..15] of VTWORD;
          aAbbrevNames : array[0..12] of array[0..15] of VTWORD;
       end;
     PPSCCVWMONTHNAMES = ^PSCCVWMONTHNAMES;
  { Flags for SCCID_SCROLLFLAGS  }

  const
     SCCVW_HSCROLL_NEVER = $0001;
     SCCVW_HSCROLL_SOMETIMES = $0002;
     SCCVW_HSCROLL_ALWAYS = $0004;
     SCCVW_VSCROLL_NEVER = $0008;
     SCCVW_VSCROLL_SOMETIMES = $0010;
     SCCVW_VSCROLL_ALWAYS = $0020;
  {
    |  Values for use with scrolling messages
     }
     SCCSB_TOP = 1;
     SCCSB_BOTTOM = 2;
     SCCSB_LINELEFT = 3;
     SCCSB_LINERIGHT = 4;
     SCCSB_PAGELEFT = 5;
     SCCSB_PAGERIGHT = 6;
     SCCSB_LINEUP = 3;
     SCCSB_LINEDOWN = 4;
     SCCSB_PAGEUP = 5;
     SCCSB_PAGEDOWN = 6;
     SCCSB_POSITION = 7;
  { document pages rather than window pages  }
     SCCSB_NEXTDOCPAGE = 10;
     SCCSB_PREVDOCPAGE = 11;
     SCCSB_ENABLED = 1;
     SCCSB_DISABLED = 2;
  {
    |     Values for User Interface Version
     }
  { the way it always was (and still is for non-Windows)  }
     SCCVW_UI_CLASSIC = 0;
  { the new Windows version  }
     SCCVW_UI_WIN = 1;

{$ifdef WIN32}
  { was #define dname(params) para_def_expr }
  { return type might be wrong }
  const
    GetUIVersion = SCCVW_UI_WIN;
//
//{$else}
//  GetUIVersion = SCCVW_UI_CLASSIC

{$endif}
  {
    |     Values for page button messages
     }

  const
     SCCVW_PAGEBUTTONS = WM_USER;
     SCCVW_NOPAGEBUTTONS = WM_USER+1;
     SCCVW_PAGEBUTTONSTATE = WM_USER+2;
     PBS_PREVDISAB = $00;
     PBS_PREVENAB = $02;
     PBD_NEXTDISAB = $00;
     PBS_NEXTENAB = $01;
     PBS_DISAB = $00;
     PBS_ENAB = $03;
     PBS_FORCE = $04;
  {
    |
    |  SCCVWSTATUSINFO50 structure
    |
     }

  type

     PSCCVWSTATUSINFO50 = ^SCCVWSTATUSINFO50;
     SCCVWSTATUSINFO50 = record
          dwSize : VTDWORD;
          dwFlags : VTDWORD;
          szText : array[0..255] of VTWORD;
          dwData : VTDWORD;
       end;
     PPSCCVWSTATUSINFO50 = ^PSCCVWSTATUSINFO50;
  { Status flag values  }

  const
     SCCVW_BEGINPROGRESS = $0001;
     SCCVW_ENABLECANCEL = $0002;
     SCCVW_PROGRESSTEXT = $0004;
     SCCVW_PROGRESSVALUE = $0008;
     SCCVW_ENDPROGRESS = $0010;
  { The cancel button has been hit  }
     SCCVW_PROGRESSCANCEL = $0020;
  {
    |
    |  SCCVWIDEALSIZE50 structure
    |
     }

  type

     PSCCVWIDEALSIZE50 = ^SCCVWIDEALSIZE50;
     SCCVWIDEALSIZE50 = record
          dwSize : VTDWORD;
          dwFlags : VTDWORD;
          dwMaxWidth : VTDWORD;
          dwMaxHeight : VTDWORD;
          dwResultWidth : VTDWORD;
          dwResultHeight : VTDWORD;
       end;
     PPSCCVWIDEALSIZE50 = ^PSCCVWIDEALSIZE50;
  {
    |
    |  SCCVWSECTIONCOUNTINFO51 structure
    |
     }

     PSCCVWSECTIONCOUNTINFO51 = ^SCCVWSECTIONCOUNTINFO51;
     SCCVWSECTIONCOUNTINFO51 = record
          dwSize : VTDWORD;
          dwFlags : VTDWORD;
          dwCount : VTDWORD;
       end;
     PPSCCVWSECTIONCOUNTINFO51 = ^PSCCVWSECTIONCOUNTINFO51;
  { Possible values for dwFlags in SCCVWSECTIONCOUNTINFO51  }

  const
     SCCVW_SECTIONCOUNTINFO_TENTATIVE = 0;
     SCCVW_SECTIONCOUNTINFO_FINAL = 1;
  {
    |
    |  SCCVWSECTIONNAME structure
    |
     }
     SECTIONNAME_MAX = 40;

  type

     PSCCVWSECTIONNAME = ^SCCVWSECTIONNAME;
     SCCVWSECTIONNAME = record
          wSectionNumber : VTWORD;
          wzName : array[0..(SECTIONNAME_MAX)-1] of VTWORD;
       end;
     PPSCCVWSECTIONNAME = ^PSCCVWSECTIONNAME;
  {
    |
    |  Legacy #defines
    |
     }

  const
     SCCVW_SELECTION = $0001;
     SCCVW_WORDDRAG = $0002;
     SCCVW_GRAMMAR = $0004;
     SCCVW_EDITOR = $0008;
     SCCVW_HORZSCROLL = $0010;
     SCCVW_TAGSELECT = $0020;
     SCCVW_TAGLEFTDOUBLE = $0040;
     SCCVW_TAGNOTEXT = $0080;
     SCCVW_NEEDRAWTEXT = $0100;
     SCCVW_SPAM = $0200;
     SCCVW_DRAGDROP = $0400;
     SCCVW_REDRAWING = $0800;
     SCCVW_OPENCLOSE = $2000;
     SCCVW_SELFBACKGROUND = $4000;
     SCCVW_ADDOPTTOMENU = $8000;
  { high bit  }
     SCCVW_FALLBACKTO = $8000;
  { Font aliasing  }
     SCCVW_FONTALIAS_COUNT = $0001;
     SCCVW_FONTALIAS_ALIASNAME = $0002;
     SCCVW_FONTALIAS_GETALIASBYID = $0004;
     SCCVW_FONTALIAS_GETALIASID = $0008;
     SCCVW_FONTALIAS_REMOVEALIASBYID = $0010;
     SCCVW_FONTALIAS_REMOVEALIASBYNAME = $0020;
     SCCVW_FONTALIAS_REMOVEALL = $0040;
     SCCVW_FONTALIAS_USEDEFAULTS = $0080;
     SCCVW_FONTNAMEMAX = 128;
     SCCVW_MAXFONTMAPENTRIES = 100;
     SCCVW_MAXALIASES = 16;
  { sizeof(SCCVWFONTALIAS)  }
  { ID of the aliasing in the current list of aliases  }
  { set of flags  }
  { original name of the font  }
  { new font name to use in place of original name  }

  type

     PSCCVWFONTALIAS832 = ^SCCVWFONTALIAS832;
     SCCVWFONTALIAS832 = record
          dwSize : VTDWORD;
          dwAliasID : VTDWORD;
          dwFlags : VTDWORD;
          szwOriginal : array[0..(SCCVW_FONTNAMEMAX)-1] of VTWORD;
          szwAlias : array[0..(SCCVW_FONTNAMEMAX)-1] of VTWORD;
       end;
     PPSCCVWFONTALIAS832 = ^PSCCVWFONTALIAS832;
  { sizeof( SCCVWFONTALIAS )  }
  { ID of the aliasing in the current list of aliases  }
  { set of flags  }
  { original name of the font  }
  { new font name(s) to use in place of original name  }

     PSCCVWFONTALIAS = ^SCCVWFONTALIAS;
     SCCVWFONTALIAS = record
          dwSize : VTDWORD;
          dwAliasID : VTDWORD;
          dwFlags : VTDWORD;
          szwOriginal : array[0..(SCCVW_FONTNAMEMAX)-1] of VTWORD;
          szwAlias : array[0..(SCCVW_FONTNAMEMAX*SCCVW_MAXALIASES)-1] of VTWORD;
       end;
     PPSCCVWFONTALIAS = ^PSCCVWFONTALIAS;
  { number of entries in the map  }
  { memory handles for original font names  }
  { memory handles for alias font names  }
  { array of all the original font names  }
  { array of all the alias font name arrays  }

     PSCCVWFONTALIASMAP = ^SCCVWFONTALIASMAP;
     SCCVWFONTALIASMAP = record
          dwCount : VTDWORD;
          hOriginal : array[0..(SCCVW_MAXFONTMAPENTRIES)-1] of VTHANDLE;
          hAlias : array[0..(SCCVW_MAXFONTMAPENTRIES)-1] of VTHANDLE;
          szwOriginal : array[0..(SCCVW_MAXFONTMAPENTRIES)-1] of VTLPWORD;
          szwAlias : array[0..(SCCVW_MAXFONTMAPENTRIES)-1] of VTLPWORD;
       end;
     PPSCCVWFONTALIASMAP = ^PSCCVWFONTALIASMAP;
  { sizeof(SCCVWUNIXOPTIONSFILEINFO)  }
  { array holding the name of the options file  }

     PSCCVWUNIXOPTIONSFILEINFO = ^SCCVWUNIXOPTIONSFILEINFO;
     SCCVWUNIXOPTIONSFILEINFO = record
          dwSize : VTDWORD;
          szFName : array[0..(SCCVW_FILENAMEMAX)-1] of VTBYTE;
       end;
  { added so that user can set/get name of the resource (LO) DLL  }
  { was #define dname def_expr }
  const SCCVW_RESOURCEIDMAX = 6 * (sizeof(VTTCHAR));
      { return type might be wrong }

  { sizeof(SCCVWRESOURCEID)  }
  { 0-5 character ID defining version of the LO DLL w/ unique resources  }

  type

     PSCCVWRESOURCEID = ^SCCVWRESOURCEID;
     SCCVWRESOURCEID = record
          dwSize : VTDWORD;
          szResourceID : array[0..(SCCVW_RESOURCEIDMAX)-1] of VTBYTE;
       end;
     PPSCCVWRESOURCEID = ^PSCCVWRESOURCEID;
  { Added for bidirectional text functionality - Deprecated, 8.3.5  }
  { do not set an algorithm at all --- this is the default  }

  const
     SCCVW_REORDER_NOVALUE = SCCUT_REORDER_NOVALUE;
  { no text is reordered in the display  }
     SCCVW_REORDER_NONE = SCCUT_REORDER_NONE;     
  { use the unicode bidirectional algorithm for reordering  }
     SCCVW_REORDER_UNICODE = SCCUT_REORDER_UNICODE;
  { mirror each line individually  }
     SCCVW_REORDER_FULL = SCCUT_REORDER_FULL;     
  {
  	New BiDi options as of 8.3.5 
  
  	SCCUT_REORDER_UNICODE_OFF
  	SCCUT_REORDER_UNICODE_LTOR
  	SCCUT_REORDER_UNICODE_RTOL
  
   }
  { Tree engine saving  }
  {** Use 256 here because that is what DETREE uses for MAX_PATH ** }

  type

     PSCCVWSAVENODE = ^SCCVWSAVENODE;
     SCCVWSAVENODE = record
          dwSize : VTDWORD;
          dwNode : VTDWORD;
          dwFlags : VTDWORD;
          szPath : array[0..255] of VTTCHAR;
          szName : array[0..255] of VTTCHAR;
       end;

  const
     SCCVW_SAVENODEFLAG_RESTORE_PATH = $00000001;     
  { Options callback  }
  { Update the printinfo at the end of the callback  }
     VWOPT_UPDATE_PRINTINFO = $00000001;     
  { Options for FI  }
     SCCVW_FI_NORMAL = 0;     
     SCCVW_FI_EXTENDEDTEST = 1;     
  { Option values for filter performance  }
     SCCVW_FILTER_NORMALPERFORMANCE = 0;     
     SCCVW_FILTER_OPTIMIZEDFORTEXT = 1;     
     SCCVW_FILTER_LZW_ENABLED = 0;     
     SCCVW_FILTER_LZW_DISABLED = 2;     
     SCCVW_FILTER_JPG_ENABLED = 0;     
     SCCVW_FILTER_JPG_DISABLED = 4;     
     SCCVW_FILTER_NORMALSUBOBJECTS = 0;     
     SCCVW_FILTER_ENABLEALLSUBOBJECTS = 32;     
     SCCVW_ANTIALIAS_OFF = 0;     
     SCCVW_ANTIALIAS_ALL = 1;     
  { Options for chunker memory usage  }
  { 4MB   }
     SCCVW_DOCUMENTMEMORYMODE_SMALLEST = 1;     
  { 16MB  <- Default value (current setting, as of 8.2.2)  }
     SCCVW_DOCUMENTMEMORYMODE_SMALL = 2;     
  { 64MB  }
     SCCVW_DOCUMENTMEMORYMODE_MEDIUM = 3;     
  { 256MB <- This was how it was set in 8.2.0  }
     SCCVW_DOCUMENTMEMORYMODE_LARGE = 4;     
  { 1 GB  }
     SCCVW_DOCUMENTMEMORYMODE_LARGEST = 5;
  { Added for SCCVW_DRAMAMINE_1 message support  }

  type

     PSCCVWDRAMAMINE1 = ^SCCVWDRAMAMINE1;
     SCCVWDRAMAMINE1 = record
          szBytes1 : array[0..63] of VTBYTE;
          szBytes2 : array[0..63] of VTBYTE;
          word1 : VTWORD;
       end;
     PPSCCVWDRAMAMINE1 = ^PSCCVWDRAMAMINE1;

  { Defines for file access  }
  const
     OIT_FILEACCESS_PASSWORD = 1;
     OIT_FILEACCESS_NOTESID = 2;

  type
     PSCCVWFILEACCESSDATA = ^SCCVWFILEACCESSDATA;
     SCCVWFILEACCESSDATA = record
          { size of this structure  }
          dwSize : VTDWORD;
          { flag if the request was processed  }
          bProcessed : VTBOOL;
          { type of information requested  }
          dwRequestId : VTDWORD;
          { FI id of reference file  }
          wFIId : VTWORD;
          { file spec type  }
          dwSpecType : VTDWORD;
          { pointer to a file spec   }
          pSpec : PVTVOID;
          { structure to place requested information in to return to OIT  }
          pReturnData : VTSYSVAL;
          { size of the return data structure  }
          dwReturnDataSize : VTDWORD;
          { The number of times the callback has already been called for the currently requested item of information  }
          dwAttemptNumber : VTDWORD;
       end;
     PPSCCVWFILEACCESSDATA = ^PSCCVWFILEACCESSDATA;
  { Status callback function signature  }

type
  PDLL_LOAD_CALLBACK_FUNC = procedure (pCallBackData:sccop.PSCCVWDLLLOADCALLBACK); cdecl;
  VWSTATCALLBACKFN = function(hUnique:VTHANDLE; dwID:VTDWORD; pCallbackData:VTSYSVAL; pAppData:VTSYSVAL):VTDWORD; cdecl;

var
  VWSetupDllLoadCallback: function (
    lpFunc:PDLL_LOAD_CALLBACK_FUNC;
    lpVector:VTLPVOID;
    dwVectorLength:VTDWORD
  ):IOERR; cdecl;

  VWSetStatCallback: function (
    pCallback:VWSTATCALLBACKFN;
    hUnique:VTHANDLE;
    pAppData:VTSYSVAL
  ):VTDWORD; cdecl;

  { Constants to use for wParam in VWFindAnno()  }
  { SCCVW_FA_NONE is the value specified in the API for SCCVW_FINDANNOTATION  }
//  const
//     SCCVW_FA_NONE = SCCANNO_FA_NONE;
//     SCCVW_FA_ENDPOS = SCCANNO_FA_ENDPOS;

{
 |  Defines for VW status callback
}

  const
     OIT_STATUS_WORKING = 0;
     OIT_STATUS_CONTINUE = SCCERR_OK;
     OIT_STATUS_CANCEL = SCCERR_CANCEL;
     OIT_STATUS_ABORT = SCCERR_ABORT;


implementation

function SCCVWRGB(r,g,b: VTBYTE): SCCANNOCOLORREF;
begin
  SCCVWRGB := SCCANNORGB(r,g,b);
end;

end.
